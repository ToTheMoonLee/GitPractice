git log 查看git提交版本
git reflog 查看git命令历史
git reset --hard commit_id git版本回退 commit_id需要输入对应的id，可以通过git reflog查看

.git 是一个版本库，在版本库中有一个叫stage的暂存区，同时git会自动创建一个master分支，并且会有一个HEAD指针指向最新的提交版本
git add 相当于把修改提交到暂存区
git commit 相当于把暂存区中的修改提交到分支上，master分支

git commit 只会提交在暂存区中的文件修改
git 追踪的是修改，而非文件

git回退：
1. 修改还没有执行git add，想要清空工作区的命令，则执行git checkout -- filename 此时会将工作区的修改清空
2. 修改执行了git add,则此时需要首先执行 git reset HEAD filename,然后再执行步骤1
3. 如果此时执行了git commit，则可以使用版本回退，git reset --hard commit_id

git远程仓库:
git支持SSH协议，需要生成SSH Key并告知远程仓库才能进行正确的代码提交，对远程仓库的操作如下：
1. ssh-keygen -t rsa -C "youremail@example.com" 执行这个指令，使用默认配置即可，生成的key在个人文件夹的.ssh文件夹中
2. 将id_rsa.pub中的公钥内容提交到远程仓库,Add Key即可

git初始化远程仓库：
1. 在github等远程服务器创建新的repository，填写对应的信息
2. 使用github中给出的指令，将本地仓库的信息推至远程仓库，如下
git remote add origin https://github.com/ToTheMoonLee/GitPractice.git
git push -u origin master

git从远程仓库克隆
1. 执行 git clone https://github.com/ToTheMoonLee/GitPractice.git 指令
https://github.com/ToTheMoonLee/GitPractice.git 即为自己的远程仓库地址
2. git支持多种协议，包括https、ssh等，ssh协议速度最快

git创建、切换、合并分支
Git支持分支创建和切换，在自己的分支上进行开发工作，而不用担心影响到主干分支的内容
指令：
查看分支： git branch  带*号的表示当前分支
创建分支： git branch <name>
切换分支： git checkout <name>
创建并切换分支： git checkout -b <name>
合并某分支到当前分支： git merge <name>
删除分支： git branch -d <name>

git merge解决冲突
1. git merge <name> 可能出现冲突，冲突会以：
<<<<<<< HEAD
xxxxxxx
========
xxxxxxxxx
>>>>>>> <branch_name>
的形式显示，此时只需要解决冲突，并再次进行提交即可
2. git log --graph 可以查看分支合并图

git分支管理
1. git在合并分支时，会用到Fast forward模式，这种模式相当于将当前分支的指针直接指向了要合并的分支的指针，区分不出分支信息
2. 如果强制禁用Fast forward模式，则在merge时会生成一个新的commit，从而可以看出合并分支信息
3. 禁用Fast forward模式方式为 --no--ff
4. 实际开发中，一般master分支是非常稳定的，仅用于发布版本，平时一般在dev分支上进行开发，每个人在开发时都有自己的分支，然后将给自的代码时不时的提交到dev分支上，并最终会合并到master分支上












 
